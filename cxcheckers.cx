package board

var board [8][8]i32

func PopulateNewBoard() {

	board[0][0] = 0
	board[0][1] = 2
	board[0][2] = 0
	board[0][3] = 2
	board[0][4] = 0
	board[0][5] = 2
	board[0][6] = 0
	board[0][7] = 2

	board[1][0] = 2
	board[1][1] = 0
	board[1][2] = 2
	board[1][3] = 0
	board[1][4] = 2
	board[1][5] = 0
	board[1][6] = 2
	board[1][7] = 0

	board[2][0] = 0
	board[2][1] = 2
	board[2][2] = 0
	board[2][3] = 2
	board[2][4] = 0
	board[2][5] = 2
	board[2][6] = 0
	board[2][7] = 2

	board[3][0] = 3
	board[3][1] = 0
	board[3][2] = 3
	board[3][3] = 0
	board[3][4] = 3
	board[3][5] = 0
	board[3][6] = 3
	board[3][7] = 0

	board[4][0] = 0
	board[4][1] = 3
	board[4][2] = 0
	board[4][3] = 3
	board[4][4] = 0
	board[4][5] = 3
	board[4][6] = 0
	board[4][7] = 3

	board[5][0] = 1
	board[5][1] = 0
	board[5][2] = 1
	board[5][3] = 0
	board[5][4] = 1
	board[5][5] = 0
	board[5][6] = 1
	board[5][7] = 0

	board[6][0] = 0
	board[6][1] = 1
	board[6][2] = 0
	board[6][3] = 1
	board[6][4] = 0
	board[6][5] = 1
	board[6][6] = 0
	board[6][7] = 1

	board[7][0] = 1
	board[7][1] = 0
	board[7][2] = 1
	board[7][3] = 0
	board[7][4] = 1
	board[7][5] = 0
	board[7][6] = 1
	board[7][7] = 0

//	board = [8][8]i32{
//		{0, 2, 0, 2, 0, 2, 0, 2},
//		{2, 0, 2, 0, 2, 0, 2, 0},
//		{0, 2, 0, 2, 0, 2, 0, 2},
//		{3, 0, 3, 0, 3, 0, 3, 0},
//		{0, 3, 0, 3, 0, 3, 0, 3},
//		{1, 0, 1, 0, 1, 0, 1, 0},
//		{0, 1, 0, 1, 0, 1, 0, 1},
//		{1, 0, 1, 0, 1, 0, 1, 0}}

}


func PrintBoard() {
	str.print(BoardAsString())
}

func BoardAsString() (bs str) {

	var row [8]str
	row[0] = "8"
	row[1] = "7"
	row[2] = "6"
	row[3] = "5"
	row[4] = "4"
	row[5] = "3"
	row[6] = "2"
	row[7] = "1"
	
	bs = ""

	for i := 0; i < 8; i++ {
		bs = bs + row[i]
		for j := 0; j < 8; j++ {

			bs = bs + " | "
			if board[i][j] == 0 {
				bs = bs + "="
			} else if board[i][j] == 1 {
				bs = bs + "X"
			} else if board[i][j] == 2 {
				bs = bs + "O"
			} else if board[i][j] == 3 {
				bs = bs + " "
			}

		}
		bs = bs + " |\n"

	}

	bs = bs + "    A   B   C   D   E   F   G   H "

}

func OnBoard(vert i32, hoz i32) (ob bool) {
	if vert > 7 || vert < 0 || hoz > 7 || hoz < 0 {
		return false
	}
	return true
}

package checkers
import "board"

func GetPossiblePos(player i32) (vert [2]i32) {
	vert[0] = -1
	if player == 2 {
		vert[0] = 1
	}
	vert[1] = -2
	if player == 2 {
		vert[1] = 2
	}
}


func ValidMove(player i32, mov1 [2]i32, mov2 [2]i32, capOnly bool, noLog bool) (valid bool) {

	if board.OnBoard(mov1[0], mov1[1]) == false || board.OnBoard(mov2[0], mov2[1]) == false {
		return false
	}

	var enemy i32
	enemy = 2
	if player == 2 {
		enemy = 1
	}

	if board.board[mov1[0]][mov1[1]] != player && board.board[mov1[0]][mov1[1]] != player+6 {
		if !noLog {
			str.print("Starting posistion invalid ")
			i32.print(board.board[mov1[0]][mov1[1]])
		}
		return false
	}
	if board.board[mov2[0]][mov2[1]] != 3 {
		if !noLog {
			str.print("Moving posistion invalid ")
			i32.print(board.board[mov2[0]][mov2[1]])
		}
		return false
	}

	if CaptureChecks(player, mov1, mov2, capOnly, enemy, false) {
		return true
	} else if board.board[mov1[0]][mov1[1]] == player+6 && CaptureChecks(player, mov1, mov2, capOnly, enemy, true) {
		return true
	}

	return false
}


func CaptureChecks(player i32, mov1 [2]i32, mov2 [2]i32, capOnly bool, enemy i32, kingFlip bool) (cc bool) {
	var hoz i32
	hoz = mov1[1] - mov2[1]
	var vert [2]i32
	vert = GetPossiblePos(player)
	if kingFlip {
		vert[0] = -vert[0]
		vert[1] = -vert[1]
	}

	//if mov2[0]-mov1[0] == vert[0] && math.Abs(float64(hoz)) == 1 && !capOnly {

	var abshoz bool
	abshoz = false
	if hoz == 1 || hoz-1 == 0 {
		abshoz = true
	}

	if mov2[0]-mov1[0] == vert[0] && abshoz && !capOnly {
		return true
	}

	if mov2[0]-mov1[0] == vert[1] {
		if hoz == -2 && board.OnBoard(mov1[0]+vert[0], mov1[1]+1) {
			if board.board[mov1[0]+vert][mov1[1]+1] == enemy || board.board[mov1[0]+vert[0]][mov1[1]+1] == enemy+6 {
				return true
			}
		} else if hoz == 2 && board.OnBoard(mov1[0]+vert[0], mov1[1]-1) {
			if board.board[mov1[0]+vert[0]][mov1[1]-1] == enemy || board.board[mov1[0]+vert[0]][mov1[1]-1] == enemy+6 {
				return true
			}
		}
	}
	return false
}


func ValidMoves(player i32) (valids [][2][2]i32) {
	//valids [][2][2]i32
	var vert [2]i32
	vert = GetPossiblePos(player)
	//valids = append(valids, [2][2]i32{0, 0})

	for i := 0; i < 8; i++ {
		for j := 0; j < 8; j++ {
			if board.board[i][j] != player && board.board[i][j] != player+6 {
				continue
			}
			var checkMoves [4][2]i32
			checkMoves[0][0] = i + vert[0]
			checkMoves[0][1] = j + 1
			checkMoves[1][0] = i + vert[0]
			checkMoves[1][1] = j - 1
			checkMoves[2][0] = i + vert[1]
			checkMoves[2][1] = j + 2
			checkMoves[3][0] = i + vert[1]
			checkMoves[3][1] = j - 2

			var currentPos [2]i32
			currentPos = [2]i32{i, j}

			for i := 0; i < 4; i++ {
				if ValidMove(player, currentPos, checkMoves[i], false, true) {
					valids = append(valids, [2][2]i32{currentPos, checkMoves[i]})
				}
			}

			if board.board[i][j] == player+6 {
				var kingMoves [4][2]i32
				checkMoves[0][0] = i - vert[0]
				checkMoves[0][1] = j + 1
				checkMoves[1][0] = i - vert[0]
				checkMoves[1][1] = j - 1
				checkMoves[2][0] = i - vert[1]
				checkMoves[2][1] = j + 2
				checkMoves[3][0] = i - vert[1]
				checkMoves[3][1] = j - 2
				for i := 0; i < 4; i++ {
					if ValidMove(player, currentPos, kingMoves[i], false, true) {
						valids = append(valids, [2][2]i32{currentPos, checkMoves[i]})
					}
				}
			}
			
			
		}
	}

	
}

var playing bool
var playerOneStuck bool
var playerTwoStuck bool

func PlayerTurn(player i32, capOnly bool, lastPos [2]i32) {
	board.PrintBoard()

	var valids [][2][2]i32
	valids = ValidMoves(player)

	if len(valids) == 0 {
		str.print("No moves for you, bad luck!")
		if player == 1 {
			playerOneStuck = true
		} else {
			playerTwoStuck = true
		}
		if playerOneStuck && playerTwoStuck {
			str.print("It's a draw!")
			playing = false
			return
		}

	} else {
		if player == 1 {
			playerOneStuck = false
		} else {
			playerTwoStuck = false
		}
	}


	playing = false
}

package main
import "board"
import "checkers"

func main () {
	
	var lp [2]i32

        str.print("Welcome to CX Checkers!\n")
	str.print("You play by specifying which piece to move, and the position to move it too")
	str.print("You can string captures, the game will let you know if you must take the next capture")
	str.print("You can also 'quit' at anytime")
	str.print("\nHave fun!\n")

	board.PopulateNewBoard()
	checkers.playing = true

	lp[0] = 0
	lp[1] = 0

	//checkers.PlayerTurn(1, false, lp)

	//for true {
		
	//	checkers.PlayerTurn(1, false, lp)
	//	if !checkers.playing {
	//		break
	//	}
	//	checkers.PlayerTurn(2, false, lp)
	//}

	play_loop:

	checkers.PlayerTurn(1, false, lp)
	if !checkers.playing {
		goto end_play
	}
	checkers.PlayerTurn(2, false, lp)
	goto play_loop

	end_play:

	str.print("\nGame Over!\n")


}

