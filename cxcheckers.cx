package board

var board [8][8]i32

func PopulateNewBoard() {

	board[0][0] = 0
	board[0][1] = 2
	board[0][2] = 0
	board[0][3] = 2
	board[0][4] = 0
	board[0][5] = 2
	board[0][6] = 0
	board[0][7] = 2

	board[1][0] = 2
	board[1][1] = 0
	board[1][2] = 2
	board[1][3] = 0
	board[1][4] = 2
	board[1][5] = 0
	board[1][6] = 2
	board[1][7] = 0

	board[2][0] = 0
	board[2][1] = 2
	board[2][2] = 0
	board[2][3] = 2
	board[2][4] = 0
	board[2][5] = 2
	board[2][6] = 0
	board[2][7] = 2

	board[3][0] = 3
	board[3][1] = 0
	board[3][2] = 3
	board[3][3] = 0
	board[3][4] = 3
	board[3][5] = 0
	board[3][6] = 3
	board[3][7] = 0

	board[4][0] = 0
	board[4][1] = 3
	board[4][2] = 0
	board[4][3] = 3
	board[4][4] = 0
	board[4][5] = 3
	board[4][6] = 0
	board[4][7] = 3

	board[5][0] = 1
	board[5][1] = 0
	board[5][2] = 1
	board[5][3] = 0
	board[5][4] = 1
	board[5][5] = 0
	board[5][6] = 1
	board[5][7] = 0

	board[6][0] = 0
	board[6][1] = 1
	board[6][2] = 0
	board[6][3] = 1
	board[6][4] = 0
	board[6][5] = 1
	board[6][6] = 0
	board[6][7] = 1

	board[7][0] = 1
	board[7][1] = 0
	board[7][2] = 1
	board[7][3] = 0
	board[7][4] = 1
	board[7][5] = 0
	board[7][6] = 1
	board[7][7] = 0

//	board = [8][8]i32{
//		{0, 2, 0, 2, 0, 2, 0, 2},
//		{2, 0, 2, 0, 2, 0, 2, 0},
//		{0, 2, 0, 2, 0, 2, 0, 2},
//		{3, 0, 3, 0, 3, 0, 3, 0},
//		{0, 3, 0, 3, 0, 3, 0, 3},
//		{1, 0, 1, 0, 1, 0, 1, 0},
//		{0, 1, 0, 1, 0, 1, 0, 1},
//		{1, 0, 1, 0, 1, 0, 1, 0}}

}


func PrintBoard() {
	str.print(BoardAsString())
}

func BoardAsString() (bs str) {

	var row [8]str
	row[0] = "8"
	row[1] = "7"
	row[2] = "6"
	row[3] = "5"
	row[4] = "4"
	row[5] = "3"
	row[6] = "2"
	row[7] = "1"
	
	bs = ""

	for i := 0; i < 8; i++ {
		bs = bs + row[i]
		for j := 0; j < 8; j++ {

			bs = bs + " | "
			if board[i][j] == 0 {
				bs = bs + "="
			} else if board[i][j] == 1 {
				bs = bs + "X"
			} else if board[i][j] == 2 {
				bs = bs + "O"
			} else if board[i][j] == 3 {
				bs = bs + " "
			}

		}
		bs = bs + " |\n"

	}

	bs = bs + "    A   B   C   D   E   F   G   H "

}

func OnBoard(vert i32, hoz i32) (ob bool) {
	if vert > 7 || vert < 0 || hoz > 7 || hoz < 0 {
		ob = false
		return
	}
	ob = true
}


func PosToBoard(a [2]str) (mov [2]i32) {

	// invalid move
	mov[0] = 8
	mov[1] = 8
	
	var hoz [8]str
	hoz = [8]str {"a","b","c","d","e","f","g","h"}
	for i := 0; i < 8; i++ {
		if hoz[i] == a[0] {
			mov[0] = i
		}

	}

	var vert [8]str
	vert = [8]str {"1","2","3","4","5","6","7","8"}
	for i := 0; i < 8; i++ {
		if vert[i] == a[1] {
			mov[1] = i
		}

	}

	//printf("mov %d, %d ", mov[0],mov[1])

}


func EnemyOnBoard(player i32) (e bool) {
	var enemy i32
	enemy = 2
	if player == 2 {
		enemy = 1
	}

	for i := 0; i < 8; i++ {
		for j := 0; j < 8; j++ {
			if board[i][j] == enemy || board[i][j] == enemy+6 {
				e = true
				return
			}
		}
	}
	e = false
}

package checkers
import "board"

func GetPossiblePos(player i32) (vert [2]i32) {
	vert[0] = -1
	if player == 2 {
		vert[0] = 1
	}
	vert[1] = -2
	if player == 2 {
		vert[1] = 2
	}
}


func ValidMove(player i32, mov1 [2]i32, mov2 [2]i32, capOnly bool, noLog bool) (valid bool) {
	valid = false

	if board.OnBoard(mov1[0], mov1[1]) == false || board.OnBoard(mov2[0], mov2[1]) == false {
		return
	}

	var enemy i32
	enemy = 2
	if player == 2 {
		enemy = 1
	}

	if board.board[mov1[0]][mov1[1]] != player && board.board[mov1[0]][mov1[1]] != player+6 {
		if !noLog {
			str.print("Starting posistion invalid ")
			i32.print(board.board[mov1[0]][mov1[1]])
		}
		return
	}
	if board.board[mov2[0]][mov2[1]] != 3 {
		if !noLog {
			str.print("Moving posistion invalid ")
			i32.print(board.board[mov2[0]][mov2[1]])
		}
		return
	}

	
	if CaptureChecks(player, mov1, mov2, capOnly, enemy, false) == true{
		//printf("CaptureChecks :true \n")
		valid = true
	} else if board.board[mov1[0]][mov1[1]] == player+6 && CaptureChecks(player, mov1, mov2, capOnly, enemy, true) {
		valid = true
	}
	
}


func CaptureChecks(player i32, mov1 [2]i32, mov2 [2]i32, capOnly bool, enemy i32, kingFlip bool) (cc bool) {
	cc = false

	var hoz i32
	hoz = mov1[1] - mov2[1]
	var vert [2]i32

	vert = GetPossiblePos(player)
	if kingFlip {
		vert[0] = -vert[0]
		vert[1] = -vert[1]
	}

	var abshoz i32
	abshoz = 0
	if hoz == 1 || hoz == -1 {
		abshoz = 1
	}


	if mov2[0]-mov1[0] == vert[0] && abshoz == 1 && !capOnly {

		//printf("true: %d\n", abshoz)
		cc = true
		return
	}

	if mov2[0]-mov1[0] == vert[1] {
		if hoz == -2 && board.OnBoard(mov1[0]+vert[0], mov1[1]+1) {
			if board.board[mov1[0]+vert][mov1[1]+1] == enemy || board.board[mov1[0]+vert[0]][mov1[1]+1] == enemy+6 {
				cc = true
				return
			}
		} else if hoz == 2 && board.OnBoard(mov1[0]+vert[0], mov1[1]-1) {
			if board.board[mov1[0]+vert[0]][mov1[1]-1] == enemy || board.board[mov1[0]+vert[0]][mov1[1]-1] == enemy+6 {
				cc = true
				return
			}
		}
	}
}


func ValidMoves(player i32) (valids [][2][2]i32) {
	var vert [2]i32
	vert = GetPossiblePos(player)

	for i := 0; i < 8; i++ {
		for j := 0; j < 8; j++ {
			

			if board.board[i][j] != player && board.board[i][j] != player+6 {
			//if board.board[i][j] != player {
				//continue	-> BUG: continue exit to root level for loop
			} else {
				var checkMoves [4][2]i32
				checkMoves[0][0] = i + vert[0]
				checkMoves[0][1] = j + 1
				checkMoves[1][0] = i + vert[0]
				checkMoves[1][1] = j - 1
				checkMoves[2][0] = i + vert[1]
				checkMoves[2][1] = j + 2
				checkMoves[3][0] = i + vert[1]
				checkMoves[3][1] = j - 2

				var currentPos [2]i32
				currentPos = [2]i32{i, j}

				for i := 0; i < 4; i++ {
					//printf("currentPos: %d, %d. move: %d, %d.\n", currentPos[0], currentPos[1], checkMoves[i][0], checkMoves[i][1])
					if ValidMove(player, currentPos, checkMoves[i], false, true) {
						//printf("valids1\n")					
						valids = append(valids, [2][2]i32{currentPos, checkMoves[i]})
					}
				}

				if board.board[i][j] == player+6 {
					var kingMoves [4][2]i32
					checkMoves[0][0] = i - vert[0]
					checkMoves[0][1] = j + 1
					checkMoves[1][0] = i - vert[0]
					checkMoves[1][1] = j - 1
					checkMoves[2][0] = i - vert[1]
					checkMoves[2][1] = j + 2
					checkMoves[3][0] = i - vert[1]
					checkMoves[3][1] = j - 2
					for i := 0; i < 4; i++ {
						if ValidMove(player, currentPos, kingMoves[i], false, true) {
							valids = append(valids, [2][2]i32{currentPos, checkMoves[i]})
						}
					}
				}
			}
			
		}
	}

	
}

var playing bool
var playerOneStuck bool
var playerTwoStuck bool

func PlayerTurn(player i32, capOnly bool, lastPos [2]i32) {
	board.PrintBoard()

	var valids [][2][2]i32
	valids = ValidMoves(player)
	//printf("len valid move:%d", len(valids))

	if len(valids) == 0 {
		str.print("No moves for you, bad luck!")
		if player == 1 {
			playerOneStuck = true
		} else {
			playerTwoStuck = true
		}
		if playerOneStuck && playerTwoStuck {
			str.print("It's a draw!")
			playing = false
			return
		}

	} else {
		if player == 1 {
			playerOneStuck = false
		} else {
			playerTwoStuck = false
		}
	}

	var rep str
	rep = "X"
	if player == 2 {
		rep = "O"
	}

	printf("Player %d (%s) move (ex: a[enter]3[enter]b[enter]4[enter]): \n", player, rep)

	var text str
	//text := read()
	//str.print("\n")

	var enemy i32
	var tmov1 [2]str
	var tmov2 [2]str
	//tmov1[0] = "i"
	//tmov1[1] = "3"
	//tmov2[0] = "b"
	//tmov2[1] = "4"
	
	//tmov1[0] = str.substr(text, 0, 0)
	//printf("tmov1[0]: ", tmov1[0])
	//tmov1[1] = str.substr(text, 1, 1)
	//printf("tmov1[1]: ", tmov1[0])
	//tmov2[0] = str.substr(text, 2, 2)
	//printf("tmov2[0]: ", tmov1[0])
	//tmov2[1] = str.substr(text, 4, 4)
	//printf("tmov2[1]: ", tmov1[0])

	tmov1[0] = read()
	text = tmov1[0]

	if text == "quit" {
		playing = false
		enemy = 2
		if player == 2 {
			enemy = 1
		}
		printf("Player %d has quit, Player %d wins!\n", player, enemy)
		return
	}

	tmov1[1] = read()
	tmov2[0] = read()
	tmov2[1] = read()

	var mov1 [2]i32
	var mov2 [2]i32
	mov1 = board.PosToBoard(tmov1)
	mov2 = board.PosToBoard(tmov2)

	

	if mov1[0] == 8 || mov1[1] == 8 || mov2[0] == 8 || mov2[1] == 8 {
		printf("Bad input, expected [a-h][1-8] [a-h][1-8], got %s\n", text)
		PlayerTurn(player, capOnly, lastPos)
		return
	}

	if ValidMove(player, mov1, mov2, capOnly, false) {
		var king bool
		king = false
		if board.board[mov1[0]][mov1[1]] == player+6 {
			king = true
		} else if (player == 1 && mov2[0] == 0) || (player == 2 && mov2[0] == 7) {
			king = true
			str.print("King me!")
		}

		board.board[mov1[0]][mov1[1]] = 3
		if king {
			board.board[mov2[0]][mov2[1]] = player + 6
		} else {
			board.board[mov2[0]][mov2[1]] = player
		}

		var absmov i32
		absmov = mov2[0]-mov1[0]
		if absmov == -2 {
			absmov = 2
		}
		
		if absmov == 2 {
			var l i32
			var h i32
			l = (mov1[0] + mov2[0]) / 2
			h = (mov1[1] + mov2[1]) / 2
			board.board[l][h] = 3
			if board.EnemyOnBoard(player) == false {
				playing = false
				board.PrintBoard()
				printf("\nCongraulations Player %d, you've won!\n", player)
				return
			}
			printf("Captured!")

			var vert [2]i32
			vert = GetPossiblePos(player)

			var checkMoves [4][2]i32
				checkMoves[0][0] = mov2[0] + vert[1]
				checkMoves[0][1] = mov2[1] + 2
				checkMoves[1][0] = mov2[0] + vert[1]
				checkMoves[1][1] = mov2[1] - 2
				checkMoves[2][0] = mov2[0] - vert[1]
				checkMoves[2][1] = mov2[1] + 2
				checkMoves[3][0] = mov2[0] - vert[1]
				checkMoves[3][1] = mov2[1] - 2

			if ValidMove(player, mov2, checkMoves[0], true, true) || ValidMove(player, mov2, checkMoves[1], true, true) {
				printf("Anoter capture possible, please go again")
				PlayerTurn(player, true, mov2)
			} else if king && (ValidMove(player, mov2, checkMoves[2], true, true) || ValidMove(player, mov2, checkMoves[3], true, true)) {
				printf("Anoter capture possible, please go again")
				PlayerTurn(player, true, mov2)
			}
		}
		

	} else {
		str.print("INVALID MOVE!")
		PlayerTurn(player, capOnly, lastPos)
		return
	}


}

package main
import "board"
import "checkers"

func main () {
	checkers.playerOneStuck = false
	checkers.playerTwoStuck = false
	
        str.print("Welcome to CX Checkers!\n")
	str.print("You play by specifying which piece to move, and the position to move it too")
	str.print("You can string captures, the game will let you know if you must take the next capture")
	str.print("You can also 'quit' at anytime")
	str.print("\nHave fun!\n")

	board.PopulateNewBoard()
	checkers.playing = true

	var lp [2]i32
	lp = [2]i32 {0,0}

	//checkers.PlayerTurn(1, false, lp)
	//for true {
	//	checkers.PlayerTurn(1, false, lp)
	//	if !checkers.playing {
	//		break
	//	}
	//	checkers.PlayerTurn(2, false, lp)
	//}

	play_loop:

	checkers.PlayerTurn(1, false, lp)
	if !checkers.playing {
		goto end_play
	}
	checkers.PlayerTurn(2, false, lp)
	goto play_loop

	end_play:

	//str.print("\nGame Over!\n")
	str.print("\nWould you like to play again? (y/n)")
	var reader str
	reader = read()
	if reader ==  "y" {
		main()
	}


}

